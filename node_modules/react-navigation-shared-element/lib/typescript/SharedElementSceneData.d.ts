import { SharedElementNode, SharedElementEventSubscription, SharedElementSceneComponent, NavigationProp } from './types';
export declare type SharedElementSceneUpdateHandlerEventType = 'ancestor' | 'add' | 'remove';
export declare type SharedElementSceneUpdateHandler = (eventType: SharedElementSceneUpdateHandlerEventType, node: SharedElementNode | undefined, id: string) => any;
export default class SharedElementSceneData {
    private updateSubscribers;
    private ancestorNode?;
    private nodes;
    readonly Component: SharedElementSceneComponent;
    readonly name: string;
    navigation: NavigationProp;
    constructor(Component: SharedElementSceneComponent, navigation: NavigationProp);
    getAncestor(): SharedElementNode | undefined;
    setAncestor(ancestorNode: SharedElementNode | null): void;
    addNode(id: string, node: SharedElementNode): void;
    removeNode(id: string, node: SharedElementNode): void;
    getNode(id: string): SharedElementNode | undefined;
    addUpdateListener(handler: SharedElementSceneUpdateHandler): SharedElementEventSubscription;
    private emitUpdateEvent;
}
