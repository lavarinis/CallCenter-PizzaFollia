import SharedElementSceneData from './SharedElementSceneData';
import { SharedElementEventSubscription, SharedElementAnimatedValue, SharedElementTransitionProps, Route } from './types';
export declare type SharedElementRendererUpdateHandler = () => any;
export interface ISharedElementRendererData {
    startTransition(animValue: SharedElementAnimatedValue, route: Route, prevRoute: Route): void;
    endTransition(route: Route, prevRoute: Route): void;
    willActivateScene(sceneData: SharedElementSceneData, route: Route): void;
    didActivateScene(sceneData: SharedElementSceneData, route: Route): void;
}
export default class SharedElementRendererData implements ISharedElementRendererData {
    private scenes;
    private updateSubscribers;
    private sharedElements;
    private isShowing;
    private animValue;
    private route;
    private prevRoute;
    private scene;
    private prevScene;
    startTransition(animValue: SharedElementAnimatedValue, route: Route, prevRoute: Route): void;
    endTransition(route: Route, //eslint-disable-line @typescript-eslint/no-unused-vars
    prevRoute: Route): void;
    willActivateScene(sceneData: SharedElementSceneData, route: Route): void;
    didActivateScene(sceneData: SharedElementSceneData, route: Route): void;
    private registerScene;
    private updateSceneListeners;
    private updateSharedElements;
    addUpdateListener(handler: SharedElementRendererUpdateHandler): SharedElementEventSubscription;
    private emitUpdateEvent;
    getTransitions(): SharedElementTransitionProps[];
}
