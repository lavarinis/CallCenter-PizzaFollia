{"version":3,"sources":["SharedElementSceneData.tsx"],"names":["SharedElementSceneData","Component","navigation","updateSubscribers","Set","ancestorNode","undefined","nodes","name","displayName","constructor","emitUpdateEvent","id","node","handler","add","remove","delete","eventType","forEach"],"mappings":"mIAkBqBA,CAAAA,sB,YAUnB,gCACEC,SADF,CAEEC,UAFF,CAGE,mDAZMC,iBAYN,CAZ0B,GAAIC,CAAAA,GAAJ,EAY1B,MAXMC,YAWN,CAXyCC,SAWzC,MAVMC,KAUN,CARE,EAQF,CACA,KAAKN,SAAL,CAAiBA,SAAjB,CACA,KAAKC,UAAL,CAAkBA,UAAlB,CACA,KAAKM,IAAL,CACEP,SAAS,CAACQ,WAAV,EACAR,SAAS,CAACO,IADV,GAECP,SAAS,CAACS,WAAV,CAAwBT,SAAS,CAACS,WAAV,CAAsBF,IAA9C,CAAqDF,SAFtD,GAGA,EAJF,CAKD,C,oFAE4C,CAC3C,MAAO,MAAKD,YAAZ,CACD,C,gDAEWA,Y,CAAwC,CAElD,GAAI,KAAKA,YAAL,GAAsBA,YAA1B,CAAwC,OACxC,KAAKA,YAAL,CAAoBA,YAAY,EAAIC,SAApC,CACA,KAAKK,eAAL,CAAqB,UAArB,CAAiC,KAAKN,YAAtC,CAAoD,EAApD,EACD,C,wCAEOO,E,CAAYC,I,CAA+B,CAEjD,KAAKN,KAAL,CAAWK,EAAX,EAAiBC,IAAjB,CACA,KAAKF,eAAL,CAAqB,KAArB,CAA4BE,IAA5B,CAAkCD,EAAlC,EACD,C,8CAEUA,E,CAAYC,I,CAA+B,CAEpD,MAAO,MAAKN,KAAL,CAAWK,EAAX,CAAP,CACA,KAAKD,eAAL,CAAqB,QAArB,CAA+BE,IAA/B,CAAqCD,EAArC,EACD,C,wCAEOA,E,CAA2C,CACjD,MAAO,MAAKL,KAAL,CAAWK,EAAX,CAAP,CACD,C,4DAGCE,O,CACgC,gBAChC,KAAKX,iBAAL,CAAuBY,GAAvB,CAA2BD,OAA3B,EACA,MAAO,CACLE,MAAM,CAAE,wBAAM,CAAA,KAAI,CAACb,iBAAL,CAAuBc,MAAvB,CAA8BH,OAA9B,CAAN,EADH,CAAP,CAGD,C,wDAGCI,S,CACAL,I,CACAD,E,CACM,CACN,KAAKT,iBAAL,CAAuBgB,OAAvB,CAA+B,SAAAL,OAAO,QAAIA,CAAAA,OAAO,CAACI,SAAD,CAAYL,IAAZ,CAAkBD,EAAlB,CAAX,EAAtC,EACD,C,6CAjEkBZ,sB","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n  NavigationProp,\n} from './types';\n\nexport type SharedElementSceneUpdateHandlerEventType =\n  | 'ancestor'\n  | 'add'\n  | 'remove';\n\nexport type SharedElementSceneUpdateHandler = (\n  eventType: SharedElementSceneUpdateHandlerEventType,\n  node: SharedElementNode | undefined,\n  id: string\n) => any;\n\nexport default class SharedElementSceneData {\n  private updateSubscribers = new Set<SharedElementSceneUpdateHandler>();\n  private ancestorNode?: SharedElementNode = undefined;\n  private nodes: {\n    [key: string]: SharedElementNode;\n  } = {};\n  public readonly Component: SharedElementSceneComponent;\n  public readonly name: string;\n  public navigation: NavigationProp;\n\n  constructor(\n    Component: SharedElementSceneComponent,\n    navigation: NavigationProp\n  ) {\n    this.Component = Component;\n    this.navigation = navigation;\n    this.name =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor ? Component.constructor.name : undefined) ||\n      '';\n  }\n\n  getAncestor(): SharedElementNode | undefined {\n    return this.ancestorNode;\n  }\n\n  setAncestor(ancestorNode: SharedElementNode | null) {\n    // console.log('SharedElementSceneData.setAncestor');\n    if (this.ancestorNode === ancestorNode) return;\n    this.ancestorNode = ancestorNode || undefined;\n    this.emitUpdateEvent('ancestor', this.ancestorNode, '');\n  }\n\n  addNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.addNode: ', id);\n    this.nodes[id] = node;\n    this.emitUpdateEvent('add', node, id);\n  }\n\n  removeNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.removeNode: ', id);\n    delete this.nodes[id];\n    this.emitUpdateEvent('remove', node, id);\n  }\n\n  getNode(id: string): SharedElementNode | undefined {\n    return this.nodes[id];\n  }\n\n  addUpdateListener(\n    handler: SharedElementSceneUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return {\n      remove: () => this.updateSubscribers.delete(handler),\n    };\n  }\n\n  private emitUpdateEvent(\n    eventType: SharedElementSceneUpdateHandlerEventType,\n    node: SharedElementNode | undefined,\n    id: string\n  ): void {\n    this.updateSubscribers.forEach(handler => handler(eventType, node, id));\n  }\n}\n"]}