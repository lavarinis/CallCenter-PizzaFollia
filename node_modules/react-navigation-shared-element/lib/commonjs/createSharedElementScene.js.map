{"version":3,"sources":["createSharedElementScene.tsx"],"names":["styles","StyleSheet","create","container","flex","createSharedElementScene","Component","rendererData","SharedElementSceneView","subscriptions","sceneData","SharedElementSceneData","props","navigation","onSetRef","ref","setAncestor","onWillFocus","activeRoute","state","routeName","willActivateScene","onDidFocus","didActivateScene","willFocus","addListener","didFocus","Object","values","forEach","subscription","remove","React","PureComponent"],"mappings":"kyBAAA,oDACA,yCACA,qFACA,qEACA,wFACA,8FAOA,8B,2GAEA,GAAMA,CAAAA,MAAM,CAAGC,wBAAWC,MAAX,CAAkB,CAC/BC,SAAS,CAAE,CACTC,IAAI,CAAE,CADG,CADoB,CAAlB,CAAf,CAUA,QAASC,CAAAA,wBAAT,CACEC,SADF,CAEEC,YAFF,CAG4B,IACpBC,CAAAA,sBADoB,0fAEhBC,aAFgB,CAIpB,EAJoB,OAKhBC,SALgB,CAKoB,GAAIC,gCAAJ,CAC1CL,SAD0C,CAE1C,MAAKM,KAAL,CAAWC,UAF+B,CALpB,OA2ChBC,QA3CgB,CA2CL,SAACC,GAAD,CAAc,CAC/B,MAAKL,SAAL,CAAeM,WAAf,CAA2B,0CAAYD,GAAZ,CAA3B,EACD,CA7CuB,OA+ChBE,WA/CgB,CA+CF,UAAM,IAClBJ,CAAAA,UADkB,CACH,MAAKD,KADF,CAClBC,UADkB,CAE1B,GAAMK,CAAAA,WAAW,CAAG,+BAAoBL,UAAU,CAACM,KAA/B,CAApB,CACA,GAAIN,UAAU,CAACM,KAAX,CAAiBC,SAAjB,GAA+BF,WAAW,CAACE,SAA/C,CAA0D,CAExDb,YAAY,CAACc,iBAAb,CAA+B,MAAKX,SAApC,CAA+CG,UAAU,CAACM,KAA1D,EACD,CACF,CAtDuB,OAwDhBG,UAxDgB,CAwDH,UAAM,IACjBT,CAAAA,UADiB,CACF,MAAKD,KADH,CACjBC,UADiB,CAEzB,GAAMK,CAAAA,WAAW,CAAG,+BAAoBL,UAAU,CAACM,KAA/B,CAApB,CACA,GAAIN,UAAU,CAACM,KAAX,CAAiBC,SAAjB,GAA+BF,WAAW,CAACE,SAA/C,CAA0D,CAExDb,YAAY,CAACgB,gBAAb,CAA8B,MAAKb,SAAnC,CAA8CG,UAAU,CAACM,KAAzD,EACD,CACF,CA/DuB,4HAUJ,IACVN,CAAAA,UADU,CACK,KAAKD,KADV,CACVC,UADU,CAElB,KAAKJ,aAAL,CAAqB,CACnBe,SAAS,CAAEX,UAAU,CAACY,WAAX,CAAuB,WAAvB,CAAoC,KAAKR,WAAzC,CADQ,CAEnBS,QAAQ,CAAEb,UAAU,CAACY,WAAX,CAAuB,UAAvB,CAAmC,KAAKH,UAAxC,CAFS,CAArB,CAID,CAhBuB,mEAkBD,CACrBK,MAAM,CAACC,MAAP,CAAc,KAAKnB,aAAnB,EAAkCoB,OAAlC,CAA0C,SAAAC,YAAY,QACpDA,CAAAA,YAAY,CAACC,MAAb,EADoD,EAAtD,EAGD,CAtBuB,uCAwBf,CAEP,MACE,qBAAC,kCAAD,CAA2B,QAA3B,EAAoC,KAAK,CAAE,KAAKrB,SAAhD,iDACE,oBAAC,iBAAD,EACE,KAAK,CAAEV,MAAM,CAACG,SADhB,CAEE,WAAW,CAAE,KAFf,CAGE,GAAG,CAAE,KAAKW,QAHZ,iDAKE,oBAAC,SAAD,0BAAe,KAAKF,KAApB,mDALF,CADF,CADF,CAWD,CArCuB,+DAuCH,CACnB,KAAKF,SAAL,CAAeG,UAAf,CAA4B,KAAKD,KAAL,CAAWC,UAAvC,CACD,CAzCuB,oCACWmB,KAAK,CAACC,aADjB,EAkE1B,kCAAqBzB,sBAArB,CAA6CF,SAA7C,EACA,MAAOE,CAAAA,sBAAP,CACD,C,aAEcH,wB","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { nodeFromRef } from 'react-native-shared-element';\nimport SharedElementSceneData from './SharedElementSceneData';\nimport SharedElementSceneContext from './SharedElementSceneContext';\nimport {\n  SharedElementEventSubscription,\n  NavigationProp,\n  SharedElementSceneComponent,\n} from './types';\nimport { ISharedElementRendererData } from './SharedElementRendererData';\nimport { getActiveRouteState } from './utils';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\ntype PropsType = {\n  navigation: NavigationProp;\n};\n\nfunction createSharedElementScene(\n  Component: SharedElementSceneComponent,\n  rendererData: ISharedElementRendererData\n): React.ComponentType<any> {\n  class SharedElementSceneView extends React.PureComponent<PropsType> {\n    private subscriptions: {\n      [key: string]: SharedElementEventSubscription;\n    } = {};\n    private sceneData: SharedElementSceneData = new SharedElementSceneData(\n      Component,\n      this.props.navigation\n    );\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      this.subscriptions = {\n        willFocus: navigation.addListener('willFocus', this.onWillFocus),\n        didFocus: navigation.addListener('didFocus', this.onDidFocus),\n      };\n    }\n\n    componentWillUnmount() {\n      Object.values(this.subscriptions).forEach(subscription =>\n        subscription.remove()\n      );\n    }\n\n    render() {\n      // console.log('SharedElementSceneView.render');\n      return (\n        <SharedElementSceneContext.Provider value={this.sceneData}>\n          <View\n            style={styles.container}\n            collapsable={false}\n            ref={this.onSetRef}\n          >\n            <Component {...this.props} />\n          </View>\n        </SharedElementSceneContext.Provider>\n      );\n    }\n\n    componentDidUpdate() {\n      this.sceneData.navigation = this.props.navigation;\n    }\n\n    private onSetRef = (ref: any) => {\n      this.sceneData.setAncestor(nodeFromRef(ref));\n    };\n\n    private onWillFocus = () => {\n      const { navigation } = this.props;\n      const activeRoute = getActiveRouteState(navigation.state);\n      if (navigation.state.routeName === activeRoute.routeName) {\n        // console.log('onWillFocus: ', navigation.state, activeRoute);\n        rendererData.willActivateScene(this.sceneData, navigation.state);\n      }\n    };\n\n    private onDidFocus = () => {\n      const { navigation } = this.props;\n      const activeRoute = getActiveRouteState(navigation.state);\n      if (navigation.state.routeName === activeRoute.routeName) {\n        // console.log('onDidFocus: ', this.sceneData.name, navigation);\n        rendererData.didActivateScene(this.sceneData, navigation.state);\n      }\n    };\n  }\n\n  hoistNonReactStatics(SharedElementSceneView, Component);\n  return SharedElementSceneView;\n}\n\nexport default createSharedElementScene;\n"]}